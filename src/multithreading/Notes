Concurrency
->java.util.concurrent (PACKAGE)
    1.Software that can perform multiple operations at a time are called concurrent software.
        For Ex-> Word Processor will always respond to mouse and keyboard events irrespective how busy it might be in
        formatting the content.
    2.Java Platform is built to support concurrent programming.

Processes and Threads
    1.A system always has active processes and thread. This is true for single core system also.
    2.In single core system only one thread executes at a time,all the thread share the single core of system via OS
        feature i.e Time Slicing.
->Processes
    1.Processes are often called programs or application.
    2.Each process has its own memory space.
    3.Communication b/w processes is done via Inter Process Communication(IPC), like pipes,sockets.
    4.In java we can create process using ProcessBuilder.

->Thread
    1.Threads are lightweight processes.
    2.All threads share the resources of a particular process they belong too.
    3.Creating a thread require less resources.
    4.Every Process has atleast one thread.
    5.By default Java Application has one thread called main thread that is capable of creating more threads.
    6.Every thread has some priority and thread are executed based on there priority,by default new thread is given same
       priority as the thread which created the new thread.
    7.Every thread has name identifier, by default "Thread-number" is name of thread but we can assign any name using
    setName() and using getName() we can verify the same.

-->Threads Creation In Java
    1.Every thread in java is the instance of Thread Class.
    2.Two ways to create thread
        a.Directly manage and create the instance of thread class every time we need to create asynchronous task.
        b.Abstract the thread creation and pass the application task to executor.(Will see this later).

  ->2.a
        1.By subclassing the Thread class which itself implements the Runnable interface.
        2.By providing the Runnable object.
  ->Runnable Interface
        1.Runnable interface has only one method run(), which the intended task that should be executed when thread is
        active.
        2.Passing the runnable object as a target to the Thread class, by target it is meant to be the runnable object
        that has run() i.e. the task to be run once thread is active.
  ->Thread Class
        1.Thread class has various other methods apart from run() which are used by other thread to manage the thread
        object and provide some useful information about the thread object.
        2.This is the easier way but this approach should be used only when we want to override some other methods of
        thread class.
Note-> In both the cases we need to call thread class start() to start the new thread which internally calls the run()
    of Runnable object.(Target)

->Sleep
        1.Calling this method causes current thread to suspend the execution for some time.
        2.By this we can make processor available to some other thread of application or other application.
        3.Two overloaded methods of sleep are there one specifies the time in millisecond and other in nanosecond.
Note-> Thread.sleep() throws InterruptedException, when any other thread is interrupts the current thread while sleep
        is active.

->Interrupts
        1.Interrupt is a signal to thread that it should stop doing whatever it is doing and should do something else.
        2.There are some methods like sleep that send the InterruptedException and cancel the execution of thread as soon
            as interrupt is received.
->Note on Point 2.
    What is thread executes where for a long time there is no method that throws interrupted exception?
        then it should priodically check Thread.interrupted() which return true if any interrupt is being received.

->Interrupt Status
        1.Internal flag to keep the interrupted status of a thread.
interrupted() vs isInterrupted()
    1.interrupted() is a static method and it return true/false based on thread received interrupt or not but more
    importantly it clears the interrupted Status of that thread.
    2.whereas isInterrupted() is non-static method and returns interrupt status of thread but doesn't clear the
        interrupt status of the thread.
